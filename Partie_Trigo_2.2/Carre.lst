


ARM Macro Assembler    Page 1 


    1 00000000                 thumb
    2 00000000         ;  
    3 00000000                 area             moncode, code, readonly
    4 00000000         
    5 00000000                 import           TabCos
    6 00000000                 import           TabSin
    7 00000000                 import           LeSignal
    8 00000000                 export           CarreM2
    9 00000000                 export           DFTre
   10 00000000                 export           DFTim
   11 00000000         
   12 00000000 00000040 
                       Nbre_pt equ              64
   13 00000000 0000003F 
                       mask    equ              63
   14 00000000         
   15 00000000         
   16 00000000         ;DFTre proc
   17 00000000         
   18 00000000 B4F0            push             {r4, r5, r6, r7}
   19 00000002 4914            ldr              r1, =LeSignal
   20 00000004 4A14            ldr              r2, =TabCos
   21 00000006 F04F 0600       mov              r6, #0      ; initialisation de
                                                             la somme
   22 0000000A F04F 33FF       mov              r3, #-1
   23 0000000E F931 5010       ldrsh            r5, [r1, r0, lsl #1]
   24 00000012 F932 7010       ldrsh            r7, [r2, r0, lsl #1]
   25 00000016 F103 0301       add              r3, #1
   26 0000001A 2B40            cmp              r3, #Nbre_pt
   27 0000001C         
   28 0000001C F103 0301 
                       Somme   add              r3, #1
   29 00000020 2B40            cmp              r3, #Nbre_pt
   30 00000022 D00B            beq              fin_somme
   31 00000024         ; calcul i*k % N
   32 00000024 FB03 F401       mul              r4, r3, r1  ; r4 <- i*k
   33 00000028 F004 043F       and              r4, #mask   ; modulo N ( = "et"
                                                             logique avec le ma
                                                            sque)
   34 0000002C         ; récupération du cos (i*k%N)
   35 0000002C F932 4014       ldrsh            r4, [r2, r4, lsl #1]
   36 00000030         ; on récupère signal(i)
   37 00000030 F930 5013       ldrsh            r5, [r0, r3, lsl #1]
   38 00000034         ; on multiplie avec le cos obtenu
   39 00000034 FB04 F405       mul              r4, r5      ; r4 <- r4*r5  
   40 00000038 4426            add              r6, r4
   41 0000003A E7EF            b                Somme
   42 0000003C         ;; fin de la somme
   43 0000003C         
   44 0000003C         fin_somme
   45 0000003C 4630            mov              r0, r6
   46 0000003E BC70            pop              {r4, r5, r6}
   47 00000040 4770            bx               lr
   48 00000042                 endp
   49 00000042         
   50 00000042         ;carreM2 proc
   51 00000042         
   52 00000042 B470            push             {r4, r5, r6}
   53 00000044 FB80 6400       smull            r6,r4, r0, r0 ; R4 = Re²



ARM Macro Assembler    Page 2 


   54 00000048 FB81 6501       smull            R6,r5, r1, r1 ; R5 = Im²
   55 0000004C         ; on additionne R4 et R5 pour obtenir le carre:
   56 0000004C EB04 0005       add              r0,r4,r5
   57 00000050 BC70            pop              {r4, r5, r6}
   58 00000052 4770            bx               lr
   59 00000054                 endp                         ;
   60 00000054         
   61 00000054                 end                          ;
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=carre.d 
-ocarre.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
ST\STM32F10x --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --list
=.\carre.lst Sources\carre.asm
